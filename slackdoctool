#!/bin/bash
# Script: 00-head.sh
# Author: Matthew Fillpot
# Created: 2012-12-28
# License: BSD
#
# Do not change version number, it is changes based upon git tags
VERSION=0.1.3
#
# Description
# -------------------------------------------------------
# Toolkit used to simplify offline editing of slackdocs
#  wiki content for http://docs.slackware.com
#

# Define the variables
EXTENSION="slackdoc"
FILETYPE="slackdocs"
SYNF_VIM="slackdocs.vim"
SD_DIR="${HOME}/slackdocs"
TEMPLATE_DIR="${SD_DIR}/templates"

# Currently pointing tomf_test, needs to be movedto master when stable
GIT_URL="https://raw.github.com/mfillpot/slackdoctool/master"
VERSION_URL="${GIT_URL}/versions.txt"
SCRIPT_URL="${GIT_URL}/slackdoctool"
SOURCE_URL="https://raw.github.com/mfillpot/sdtbase/master"
SYNTAX_URL="${SOURCE_URL}/syntax_files"

SD_URL="http://docs.slackware.com"
TEMP_URL="${SD_URL}/wiki:user:mfillpot:template_list"
TEMP_FILE="${SD_DIR}/templates.txt"

# set a variable to hold the template list
TEMPS=()

# Add a variable to hold terminal width
TERMWIDTH="$(tput cols)"

# Set Output font colors
BLDTXT=$(tput bold)
NRMTXT=$(tput sgr0)
ERRTXT=$(tput setaf 1)
SCSTXT=$(tput setaf 2)


# Script: 01-IsRoot.sh
IsRoot() {
  # Check if the script is run as root
  if [ "$(id -u)" = "0" ]; then
     PrintError "Do not run the script as root."
     exit 1
  fi
}

# Script: 02-CheckUpdate.sh
CheckUpdate() {
# Checks githhub for a new version of the file and downloads it

  # Display a message indicating that the script is checking for a new
  # version
  PrintText 2 "${BLDTXT}" "Checking for an updated script." 1

  # get the new version number from the repo
  local NEW_VERSION=$(lynx -dump ${VERSION_URL} | grep slackdoctool | cut -d "=" -f 2)

  # Test to see if an update is available, display a message indicatin the
  # status
  if [ "${NEW_VERSION}" = "${VERSION}" ]; then
    PrintText 2 "${SCSTXT}" "Your copy is up to date" 1
  else 
    PrintText 2 "${BLDTXT}" "A new version (${NEW_VERSION}) is available." 1
  fi
}

# Script: 03-BuildStructure.sh
BuildStructure() 
{
  # Accepts no arguments, builds directory structure

  # Tests if the directory does not exists
  # if true build structure
  # if false do nothing
  if [ ! -d ${TEMPLATE_DIR} ]; then

    # Display message indicating the directory does not exist
    PrintText 0 "${ERRTXT}" "The user directory at ${SD_DIR} \
      does not exist" 1

    # Prompt the user for creation and perform necessary actions
    read -p "Would you like to create it? (Y/N) :" yn
    case ${yn} in
      [Yy*]* )
        # make the necessary directory
        MakeDir ${SD_DIR}

        if [ ! -d ${TEMPLATE_DIR} ]; then
          MakeDir ${TEMPLATE_DIR}
        fi
        ;;
      * )
        PrintError "Cannot resume without directory in place, Terminating."
        exit 1
        ;;
    esac
  fi
}

# Script: 10-PrintText.sh
PrintText() {
  # Used to output properly wrapping text with indentation and formatting.

  # Arg1 = Indent Count
  # Arg2 = Font Formatting
  # Arg3 = Input Text
  # Arg4 = 1 - newline, 0 - no newline

  local INDENT=${1}
  local FORMAT="${2}"
  local INPUTTEXT="${3}"

  # Determine if a new line is wanted after the text
  if [ "${4}" = "1" ]; then
    local NEWLINE="\n"
  else
    local NEWLINE=""
  fi

  # Build strings as independent words and setting words to not wrap on new
  # lines, but anticpiate new lines between words
  #
  # The command tput cols is fetching the colum count for the open terminal
  local NEWSTR="" 
  for WORD in ${INPUTTEXT}
  do
    if [ "${NEWSTR}" = "" ]; then
        NEWSTR="${WORD}"
    else
      local TSTSTR="${NEWSTR}${WORD} "
      if [ ${#TSTSTR} -lt $((${TERMWIDTH}-${INDENT})) ]; then 
        NEWSTR="${NEWSTR} ${WORD}"
      else
        printf "%*s" ${INDENT} ""
        printf "${FORMAT}%s${NRMTXT}${NEWLINE}" "${NEWSTR}"
        NEWSTR="${WORD}"
      fi
    fi
  done

  # Output the indent and string
  printf "%*s" ${INDENT} ""
  printf "${FORMAT}%s${NRMTXT}${NEWLINE}" "${NEWSTR}"
}

# Script: 11-PrintError.sh
PrintError() {
  # Arg1 = Text To Display

  #Writes the string in the error color with a blank line following it

  local ERROR_TEXT="${1}"

  # Peint the error message
  PrintText 2 "${ERRTXT}" "${ERROR_TEXT}" 1

  # Peint a new line
  printf "\n"
}

# Script: 12-HelpArg.sh
HelpArg() {
  # Defines and utilizes standard indentation and formatting to display the help arguments

  # Deinte the Option text
  local OPT="${1}"
  # Defin the Arguement text
  local ARG="${2}"
  # Define the description text
  local DISTXT="${3}"

  # Defin the standard text indendation
  local IND=8
  # Defin the indentation of the heading
  local HIND=$((${IND}-4))

  # Define the spacing that can be use
  local SPC=2

  # Display the option and argument
  PrintText ${HIND} "${BLDTXT}" "${OPT}  ${ARG}" 1

  # Display the description
  PrintText ${IND} "${NRMTXT}" "${DISTXT}" 1

}

# Script: 20-RefreshTemplates.sh
RefreshTemplates() {
  # Refresh the list of available templates

  # Display a message to the user stating upcoming action  
  PrintText 2 "${BLDTXT}"  "Refreshing the list of available templates..." 1

  # Fetch the list of templates and store in local template file
  lynx -dump ${TEMP_URL} | awk -F: '/templates:/ {print $NF}'>${TEMP_FILE}
  
  # Make the order of the templates more structured
  sort ${TEMP_FILE} -o ${TEMP_FILE}

  # Populates the TEMPS array with a list of available templates
  SetTemps
}

# Script: 21-SetTemps.sh
SetTemps() {
  # Sets an array with the contents of the template index file
  while read line; do
    TEMPS+=("${line}")
  done < ${TEMP_FILE}
}

# Script: 22-AvailableTemplates.sh
AvailableTemplates() {
  # Displays a list of available templates and usage

  # Make sure the template file exists and the TEMPS array is set
  if [ ! -f "${TEMP_FILE}" ]; then
    # The RefreshTemplates function included SetTemps
    RefreshTemplates
  else
    SetTemps
  fi

  PrintText 0 "${BLDTXT}" "The following templates are available:" 1
  
  # Loop over the TEMPS array to display available templates 
  # Continue to use printf as the Writext function creates errors with array
  # values
  for i in ${!TEMPS[*]}
  do
    printf "%4d: %s\n" $i ${TEMPS[$i]}
  done
  printf "\n"
}

# Script: 23-PullTemplates.sh
PullTemplates() {
  # Pulls the listed template files into the templates directory

  # Checks if the templte directory exists
  if [ ! -f "${TEMP_FILE}" ]; then
    RefreshTemplates
  else
    SetTemps
  fi

  # Fetches the templates listed in the TEMPS array.
  for TEMPLATE in "${TEMPS[@]}"
  do
    PullPage "templates:${TEMPLATE}" "${TEMPLATE_DIR}"
  done

  # Display the success message
  PrintText 2 "${SCSTXT}" "All templates have been successfully retrieved." 1
}

# Script: 30-PullPage.sh
PullPage() {
  # Pulls the single page from $1 into the location at $2

  local EXTRACTLINE="?do=export_raw"

  # Page holds the name of the requested page
  local PAGE=${1}

  # If destination does not include ending slash add it
  if [[ ${2} == *"/" ]]; then
    local DESTDIR="${2}"
  else
    local DESTDIR="${2}/"
  fi
  
  # If the destination directory does not exist exit with an error
  if [ ! -d ${DESTDIR} ]; then
    PrintText 2 "${ERRTXT}" "The ${DESTDIR} directory does not exist, terminating action" 1
    exit 1
  fi

  # if requested page includes base url remove it so output page can be 
  #  determined
  if [[ "${PAGE}" == *"${SD_URL}"* ]]; then
    PAGE="$(echo "${PAGE}"|cut -d "/" -f 4)"
  fi

  # Set output file name
  if [ "${2}" = "${TEMPLATE_DIR}" ]; then
    local OF="$(echo "${PAGE}"|sed 's/:/-/g'|sed 's/templates-//g').${EXTENSION}"
  else
    local OF="$(echo "${PAGE}"|sed 's/:/-/g').${EXTENSION}"
  fi

  # If output file exists remove it
  if [ -e ${DESTDIR}${OF} ]; then
    RemoveFile ${DESTDIR}${OF} 1
  fi

  # Append the base url to the page address
  PAGE=${SD_URL}/${PAGE}

  # If output file arleady exists prompt user to overwrite it
  if [ -e ${DESTDIR}${OF} ]; then
    PrintText 0 "${NRMTXT}" "${DESTDIR}${OF} exists" 1
    read -p "Would you like to overwrite it? " yn
    case ${yn} in
    [Yy]* )

      RemoveFile ${DESTDIR}${OF} 1

      FinishPull ${PAGE}${EXTRACTLINE} ${PAGE} ${DESTDIR}${OF}
      ;;
    * )
      # Keep printf as a simple use
      printf ""
      ;;
    esac
  else
    FinishPull ${PAGE}${EXTRACTLINE} ${PAGE} ${DESTDIR}${OF}
  fi
}

# Script: 31-FinishPull.sh
FinishPull() {
  # retrieve the page
  #
  # Arg1 = URL
  # Arg2 = Descriptive Name
  # Arg3 = Output File Name
  
  F_STATUS=""
  local URL=${1}
  local DESCRIPT=${2}
  local OUTFILE=${3}
  
  local FAILTEXT="epub_LoadScript"

  # Fetch the desired file
  wget ${URL} --output-document=${OUTFILE}

  # Test for a valid pull and display associated message
  if [ -n "$(cat ${OUTFILE}|grep ${FAILTEXT})" ]; then
    RemoveFile ${OUTFILE} 1
    PrintText 2 "${ERRTXT}" "${DESCRIPT} does not exist" 1
  unset F_STATUS
  else
    PrintText 2 "${SCSTXT}" "${OUTFILE} is ready to edit" 1
  F_STATUS=0
  fi
}

# Script: 32-PullFromList.sh
PullFromList() {
  # This function is intended to allow a user to specificy a text file
  #  list of pages to retreive and pull them into the desired directory
  #
  # Arg1 = List File
  # Arg2 = Destination Dir

  local LISTFILE=${1}
  local DESTDIR=${2}
  local FETCHED=()
  local FAILED=()

  # Read each line of the input file
  while read PAG
  do
    # Pull the specified page
    PullPage "${PAG}" "${DESTDIR}" 
    # Appen page name is list dependent upon the outcome
    [ -z "${F_STATUS}" ] && FAILED+=("${PAG}") || FETCHED+=("${PAG}")
  done < ${LISTFILE}

  # Ouput the list of passes and failed documents
  # Not using printf or PrintText and it only display first value in arrays
  echo
  if [[ ${#FETCHED[@]} -ne 0 ]]; then
    echo "Fetched ${#FETCHED[@]} document(s): ${FETCHED[@]}"
  fi
  if [[ ${#FAILED[@]} -ne 0 ]]; then
    echo "Failed to fetch ${#FAILED[@]} document(s): ${FAILED[@]}"
  fi
  echo
}

# Script: 40-CreateNew.sh
CreateNew() {
  # Copies a template into a new filename and sets it for editing

  # Pull the templates if they are not present
  if [ ! -d ${TEMPLATE_DIR} ]; then
    PullTemplates
  fi
  
  local TEMPLATE_FILE=${TEMPLATE_DIR}/${TEMPS[${USETEMPLATE}]}.${EXTENSION}
  local OUTPUT_FILE=${SD_DIR}/${NEWFILE}.${EXTENSION}

  if [ -f ${TEMPLATE_FILE} ]; then

    # Check if the output file already exists. If so, edit it.
    if [ -f ${OUTPUT_FILE} ]; then
      vim ${OUTPUT_FILE}
    else
      # If the output file does not exist, copy the template, rename and
      # edit it.
      cp ${TEMPLATE_FILE} ${OUTPUT_FILE} && vim ${OUTPUT_FILE}
    fi
  else
    # If template does not exist or is unaccessible then display error
    # messages
    PrintError "There have been problems accessing the template"
    PrintError "Please, list and/or refresh the templates with -r option"
    exit 1
  fi
}

# Script: 41-CopyToClipboard.sh
CopyToClipboard()
{
  # Copies a file to the clipboard for pasteing online
  #
  # Arg1 = File Name
  # Arg2 = 1 to turn confirmations ON, else confirmations OFF

  local FILENAME=${1}
  local CONFS=${2}


  # Test to see if xclip is installed, if false display error and exit
  ls /var/log/packages | grep "\<xclip\>" > /dev/null
  if [ ! $? -eq 0 ]; then
    PrintText 0 "${ERRTXT}" "xclip is not installed, the contents will need to be manually copied." 1
    exit 1
  fi

  # If file exists Start copy process
  if [ -f ${FILENAME} ]
  then
    if [ "${CONFS}" = "1" ]
    then
      # if xclip is installed on the system, 
      # copy the contents of the file to clipboard
      read -p "Would you like the contents of ${FILENAME} to be copied to the
clipboard [y/N]? " yn
      case ${yn} in
      [Yy*]* )
        cat ${FILENAME} | xclip -selection clipboard
        PrintText 0 "${SCSTXT}" "The contents of ${FILENAME} has been copied to clipboard." 1
        return 1
        ;;
      esac
    else
      cat ${FILENAME} | xclip -selection clipboard
    fi
  else
    PrintText 0 "${ERRTXT}" "The File ${FILENAME} does not exist, terminating action." 1
    exit 1
  fi
}

# Script: 48-GetSyntaxExample.sh
GetSyntaxExample () {
  # Fetch the Syntax file
  PullPage "wiki:syntax" ${SD_DIR}

  # Print a success message
  printf "\n"
  PrintText 0 "${NRMTXT}" "The example syntax file is now located at ${SD_DIR}/wiki-syntax.${EXTENSION}" 1
}

# Script: 60-PrepSyntax.sh
PrepSyntax() {
  case "${SYNAPP}" in
    vim)
      VImSyntax
      ;;
    kate)
      KateSyntax
      ;;
    *)
      PrintError "Cannot set syntax info for ${SYNAPP}, please contact the
authors of slackdoctool if you want it included."
      exit 1
      ;;
  esac
}

# Script: 61-VimSyntax.sh
VimSyntax() {
  # Update/ Appends the necessary directive to the users .vimrc
  #  file to set syntax highlighting for slackdocs

  local VIMRC="${HOME}/.vimrc"

  # Fetch a new Syntax File
  wget ${SYNTAX_URL}/${SYNF_VIM} --output-document=${SD_DIR}/.${SYNF_VIM}

  # removes existing slackdoc syntax template lines if they exist
  sed -i /${FILETYPE}/d ${VIMRC}

  # Write the new lines to the vimrc file
  echo "\" Add a pointer to the ${FILETYPE} vim syntax file">>${VIMRC}
  echo "au BufRead,BufNewFile *.${EXTENSION} set
filetype=${FILETYPE}">>${VIMRC}
  echo "au! Syntax ${FILETYPE} source ${SD_DIR}/.${SYNF_VIM}">>${VIMRC}

  # Display a success message to the user
  PrintText 2 "${SCSTXT}" "The script has added the following lines to your
vimrc file" 1
  # Display the newly created lines
  cat ${VIMRC} | grep ${FILETYPE}
  printf "\n"
}

# Script: 62-KateSyntax.sh
KateSyntax() {
  # Display message indicating how to enable syntax highliting in kate
  PrintText 2 "${BLDTXT}" \
          "To implement syntax highlighting to slackdoc articles in kate you need to enable the MediaWiki syntax highlighting by going to Tools -> Highlighting -> Markup -> Mediawiki." 1
}

# Script: 80-PrintHelp.sh
DisplayHelp() {
# Do not edit this file it is composed from the contents of args.txt
PrintText 4 "${SCSTXT}" "Slackware Documentation Project - Off-line Tools" 1
PrintText 4 "${BLDTXT}" "Version: ${VERSION}" 1
PrintText 0 "" "" 1
PrintText 6 "${BLDTXT}" "Slackdocs Website:" 1
PrintText 8 "${NRMTXT}" "http://docs.slackware.com" 1
PrintText 6 "${BLDTXT}" "Project URL:" 1
PrintText 8 "${NRMTXT}" "https://github.com/mfillpot/slackdoctool" 1
PrintText 0 "" "" 1

PrintText 0 "${BLDTXT}" "OPTIONS" 1

HelpArg "-h" "" "Display this dialog"
HelpArg "-S" "" "Fetch the syntax file(s)."
HelpArg "-s" "app" "Apply the syntax highlighting file for the chosen application. Valid options are kate and vim."
HelpArg "-T" "" "Fetch all templates from the website"
HelpArg "-w" "url" "Fetch an article from the slackdocs URL given. If the -d argument is not given it will save in the slackdocs directory."
HelpArg "-f" "file" "Fetch articles from the slackdocs wiki from the list contained within the specified file. If no -d option is given it will save the documents into the slackdocs directory."
HelpArg "-d" "dir" " Only valid with the -f and -w arguments. This specifies the destination directory which will contain the fetched file(s)."
HelpArg "-c" "file" "Copy the selected file's contents into the clipboard."
HelpArg "-n" "number" "Create a new file based upon the specified template. The template list can be viewed with the -l option."
HelpArg "-o" "file" "Only used with the -n option. The argument will contain the name of the new output file."
HelpArg "-r" "" "Refresh the list of templates from the slackdocs wiki."
HelpArg "-l" "" "List all available templates."
HelpArg "-u" "" "Check for an update to this script."
HelpArg "-a" "" "Download all base and syntax files from the slackdocs wiki."
}

# Script: 94-RemoveFile.sh
RemoveFile () {
  # This function is intended to verbosely delete the input file and exit
  # function with and error message if the rm command fails

  # Arg 1 = File Name
  # Arg 2 = boolean for verbose output

  local VERB=""

  # Decide if the output will be verbose
  if [ "$2" = "1" ]; then
    VERB="-v"
  fi

  # IF file exists attempt to remove it
  if [ -f ${1} ]; then
    rm ${VERB} ${1}
    if [ ! "$?" = "0" ]; then
      PrintError "Could not delete ${1}, check the permissions of the parent directory"
      exit 1
    fi
  fi
}

# Script: 95-MakeDir.sh
MakeDir () {
  # This function is intended to verbosely build the input directory and exit
  # function with and error message if the mkdir command fails

  mkdir -pv ${1}
  if [ ! "$?" = "0" ]; then
    PrintError "Could not make ${1}, check the permissions of the parent directory"
    exit 1
  fi
}

# Script: 96-CheckArgs.sh
CheckArgs () {

  # If no arguments are displayed then display the help output
  if [ "${#}" = "0" ]; then
    DisplayHelp
    exit 1
  fi

  # Test the arguments
while getopts ":ac:d:f:hln:o:rs:uw:ST" opt; do
    case $opt in
  h)
    DisplayHelp
    exit 0
    ;;


  S)
    FETCHSYNTAX=1
    ;;
  s)
    SYNAPP=${OPTARG}
    ;;
  T)
    FETCHTEMPLATES=1
    ;;


  w)
    GETURL=${OPTARG}
    ;;
  f)
    GETFILE=${OPTARG}
    ;;
  d)
    DESTDIR=${OPTARG}
    ;;


  c)
    COPYFILE=${OPTARG}
    ;;


  n)
    USETEMPLATE=${OPTARG}
    ;;
  o)
    NEWFILE=${OPTARG}
    ;;


  r)
    FETCHTEMPLATES=1
    ;;
  l)
    LISTTEMPLATES=1
    ;;


  u)
    GETUPDATE=1
    ;;
  a)
    # Pull All, Prep Directory
    FETCHSYNTAX=1
    FETCHTEMPLATES=1
    ;;
  \?)
    PrintError "Invalid option:-$OPTARG"
    DisplayHelp
    exit 1
    ;;
  :)
    PrintError "Option -$OPTARG requires an argument."
    DisplayHelp
    exit 1
    ;;
  esac
done
}

# Script: 97-CheckValid.sh
CheckValid() {
  # This function tests all possible arguments for errors and reports or
  # terminates as necessary

  # If syntax highlight is requested test arguments
  if [ -n "${SYNAPP}" ]; then
  #  PrepSyntax
    case "${SYNAPP}" in 
      vim)
        SynApp=vim
        ;;
      kate)
        SynApp=kate
        ;;
      *)
        PrintError "Cannot set syntax info for ${SYNAPP}, please contact the authors of slackdoctool if you want it included."
        ISERROR=1
        ;;
    esac
  fi


  # Verify that the URL entered is not a local file or directory
  if [ -n "${GETURL}" ]&&[ -d ${GETURL} ]; then
    PrintError "Directory ${GETURL} was input into -u. A Url Must be entered"
    ISERROR=1
  elif [ -n "${GETURL}" ]&&[ -f ${GETURL} ]; then
    PrintError "File ${GETURL} was input into -u. A Url Must be entered"
    ISERROR=1
  fi

  # Verify that the FILE entered is not a local directory
  if [ -n "${GETFILE}" ]&&[ ! -f  ${GETFILE} ]; then
    PrintError "File ${GETFILE} does not exist. Cannot continue."
    ISERROR=1
  fi

  # Verify when an output directory is entered that it was with valid options
  if [ -n "${DESTDIR}" ]&&[ -z "${GETFILE}" ]&&[ -z "${GETURL}" ]; then
    PrintError "Output directories are only valid when fetching URLs or a list of URLs, the option is being ignored"
  fi

  # Verify that the specified file exists
  if [ ! -f ${COPYFILE} ]; then
    PrintError "You cannot copy ${COPYFILE}, it does not exist."
    ISERROR=1
  fi
  
  # Verify that the specified template number exists
  if [ -n "${USETEMPLATE}" ]; then
    if [ ! -f "${TEMP_FILE}" ]; then
      PrintError "No template list available, use the -r option to pull the updated list of templates."
      ISERROR=1
    else
      SetTemps
      let TEMPSINDEX=${#TEMPS[@]}-1
      if [[ "${USETEMPLATE}" -gt "${TEMPSINDEX}" ]]||[[ "${USETEMPLATE}" -lt 0 ]]; then
        PrintError "No such template exists, use the -l option to list available templates."
        ISERROR=1
      fi
    fi
  fi
 
  # If one of more errors are reports exit with a status 1 
  if [ -n "${ISERROR}" ]; then
    exit 1
  fi
}

# Script: 98-RunFunctions.sh
RunFunctions() {
  if [ -n "${FETCHSYNTAX}" ]; then 
    GetSyntaxExample
  fi

  if [ -n "${SYNAPP}" ]; then 
    PrepSyntax
  fi

  if [ "${FETCHTEMPLATES}" = "1" ]; then 
    PullTemplates
  fi

  if [ "${LISTTEMPLATES}" = "1" ]; then 
    AvailableTemplates
  fi

  # FETCH FROM URL
  if [ -n "${GETURL}" ]; then 
    # If no destination directory is added default to the slackdoc dir
    if [ -z "${DESTDIR}" ]; then
      DESTDIR=${SD_DIR}
    fi
    #  PullPage
    PullPage ${GETURL} ${DESTDIR}
  fi
  
  # FETCH FROM LIST
  if [ -n "${GETFILE}" ]; then 
    # If no destination directory is added default to the slackdoc dir
    if [ -z "${DESTDIR}" ]; then
      DESTDIR=${SD_DIR}
    fi
    #  PullFromList
    PullFromList ${GETFILE} ${DESTDIR}
  fi

  if [ -n "${COPYFILE}" ]; then 
    CopyToClipboard "${COPYFILE}"
  fi

  if [ -n "${USETEMPLATE}" ]&&[ -n "${NEWFILE}" ]; then
    CreateNew "${USETEMPLATE}" "${NEWFILE}"
  fi

  if [ -n "${GETUPDATE}" ]; then
    CheckUpdate
  fi
}

# Script: 99-execs.sh

# Check if run as root, if root then exit
IsRoot

# Test all Arguments
CheckArgs "$@"

# Verify that no invalid arguments are given
CheckValid

# If no errors, then check run the functions
BuildStructure
RunFunctions

# If it succeeds until now it processed successfully
exit 0

